{"version":3,"file":"static/js/982.c8063560.chunk.js","mappings":"2MACA,EAAuB,0BAAvB,EAA6D,+BAA7D,EAAqG,4BAArG,EAAyI,2B,oBCkB9HA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,UCkDpB,EA/DoB,WAClB,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAE5BC,EAAe,SAAAC,GACnB,MAAmCA,EAAEC,cAAvBC,EAAd,EAAQb,KAAiBc,EAAzB,EAAyBA,MACP,SAAdD,EACFZ,EAAQa,GACe,WAAdD,GACTV,EAAUW,EAEb,EAgBD,OACE,kBAAMC,UAAWC,EAAeC,SAfb,SAAAN,GACnBA,EAAEO,iBAEAZ,EAASa,MACP,SAAAC,GAAO,OAAIA,EAAQpB,KAAKqB,gBAAkBrB,EAAKqB,aAAxC,IAGTC,MAAMtB,EAAO,4BAGfI,GAASmB,EAAAA,EAAAA,IAAY,CAAEvB,KAAAA,EAAME,OAAAA,EAAQP,GAAIN,OACzCY,EAAQ,IACRE,EAAU,IACX,EAEC,WACE,mBAAOY,UAAWC,EAAlB,kBAEE,kBACEQ,KAAK,OACLT,UAAWC,EACXhB,KAAK,OACLc,MAAOd,EACPyB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAAUlB,QAGd,mBAAOK,UAAWC,EAAlB,oBAEE,kBACEQ,KAAK,MACLxB,KAAK,SACLe,UAAWC,EACXF,MAAOZ,EACPuB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,SAAUlB,QAGd,mBAAQK,UAAWC,EAAnB,2BAGL,EClED,EAA4B,+BCA5B,EAAuB,0BAAvB,EAA0D,4BC2B1D,EAzBoB,SAAC,GAAoC,IAAlCrB,EAAiC,EAAjCA,GAAIK,EAA6B,EAA7BA,KAAME,EAAuB,EAAvBA,OAAQ2B,EAAe,EAAfA,SACvC,OACE,gBAAId,UAAWC,EAAf,WACE,yBACGhB,EADH,KACWE,MAEX,mBACEsB,KAAK,SACLT,UAAWC,EACXc,QAAS,WACPD,EAASlC,EACV,EALH,sBAWL,ECgBD,EA7BoB,WAClB,IAAMS,GAAWC,EAAAA,EAAAA,MACX0B,GAASxB,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMuB,OAAOC,MAAjB,IAC1B1B,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,KAElCwB,EAAAA,EAAAA,YAAU,WACR7B,GAAS8B,EAAAA,EAAAA,MACV,GAAE,CAAC9B,IAEJ,IAAM+B,EAAkB7B,EAASyB,QAAO,SAAAX,GAAO,OAC7CA,EAAQpB,KAAKqB,cAAce,SAASL,EAAOV,cADE,IAG/C,OACE,eAAIN,UAAWC,EAAf,SACGmB,EAAgBE,KAAI,WAAuBC,GAAvB,IAAG3C,EAAH,EAAGA,GAAIK,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACnB,SAAC,EAAD,CAEEF,KAAMA,EACNE,OAAQA,EACRqC,IAAK5C,EACLkC,SAAU,WACRzB,GAASoC,EAAAA,EAAAA,IAAe7C,GACzB,GANIA,EAFY,KAa1B,ECjCD,EAAwB,sBAAxB,EAAsD,sB,UCwBtD,EArBe,WACb,IAAMS,GAAWC,EAAAA,EAAAA,MACX0B,GAASxB,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMuB,OAAOC,MAAjB,IAIhC,OACE,+BACE,mBAAOjB,UAAWC,EAAlB,mCAEE,kBACED,UAAWC,EACXQ,KAAK,OACLV,MAAOiB,EACPH,SAXa,SAAAjB,GACnBP,GAASqC,EAAAA,EAAAA,GAAgB9B,EAAEC,cAAcE,MAAMO,eAChD,QAcF,ECpBKL,EAAM,CACV0B,UAAW,CACTC,SAAU,QACVC,OAAQ,WAiBZ,EAbiB,WACf,OACE,iBAAKC,MAAO7B,EAAI0B,UAAhB,WACE,uCACA,SAAC,EAAD,KAEA,sCACA,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pagas/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactForm_item__zE+8S\",\"container\":\"ContactForm_container__qpJ1N\",\"button\":\"ContactForm_button__eSwX9\",\"input\":\"ContactForm_input__Bl93P\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { addContacts } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nconst ContactForm = () => {\n  const [name, setname] = useState('');\n  const [number, setnumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const handleChange = e => {\n    const { name: inputName, value } = e.currentTarget;\n    if (inputName === 'name') {\n      setname(value);\n    } else if (inputName === 'number') {\n      setnumber(value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(name + ' is already in contacts');\n      return;\n    }\n    dispatch(addContacts({ name, number, id: nanoid() }));\n    setname('');\n    setnumber('');\n  };\n  return (\n    <form className={css.container} onSubmit={handleSubmit}>\n      <label className={css.item}>\n        Name\n        <input\n          type=\"text\"\n          className={css.input}\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <label className={css.item}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          className={css.input}\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <button className={css.button}>Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactList_container__hYHc3\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactItem_item__gxreB\",\"button\":\"ContactItem_button__IRFBz\"};","import css from './ContactItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, onRemove }) => {\n  return (\n    <li className={css.item}>\n      <p>\n        {name}: {number}\n      </p>\n      <button\n        type=\"button\"\n        className={css.button}\n        onClick={() => {\n          onRemove(id);\n        }}\n      >\n        Remove\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\nexport default ContactItem;\n","import css from './ContactList.module.css';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { removeContacts } from 'redux/contacts/operations';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter.status);\n  const contacts = useSelector(state => state.contacts.items);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  return (\n    <ul className={css.container}>\n      {visibleContacts.map(({ id, name, number }, index) => (\n        <ContactItem\n          key={id}\n          name={name}\n          number={number}\n          idx={id}\n          onRemove={() => {\n            dispatch(removeContacts(id));\n          }}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Filter_title__pSkfx\",\"input\":\"Filter_input__N7T3z\"};","import css from './Filter.module.css';\nimport { setStatusFilter } from 'redux/filterReducer';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter.status);\n  const handleFilter = e => {\n    dispatch(setStatusFilter(e.currentTarget.value.toLowerCase()));\n  };\n  return (\n    <>\n      <label className={css.title}>\n        Find contacts by name\n        <input\n          className={css.input}\n          type=\"text\"\n          value={filter}\n          onChange={handleFilter}\n        />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nconst css = {\n  container: {\n    maxWidth: '500px',\n    margin: '0 auto',\n  },\n};\n\nconst Contacts = () => {\n  return (\n    <div style={css.container}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","useState","name","setname","number","setnumber","dispatch","useDispatch","contacts","useSelector","state","items","handleChange","e","currentTarget","inputName","value","className","css","onSubmit","preventDefault","find","contact","toLowerCase","alert","addContacts","type","pattern","title","required","onChange","onRemove","onClick","filter","status","useEffect","fetchContacts","visibleContacts","includes","map","index","idx","removeContacts","setStatusFilter","container","maxWidth","margin","style"],"sourceRoot":""}